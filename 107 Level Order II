/* 107 Level Order II
* 1. What's done
* My solution: level order = bfs. Visit a node, store the value, and push two children to the queue. 
*
* 2. Problems encountered
* How to publish list for each level? (When to start a new list in the while loop)
* 3. To do 
* major changes, add comments please!! please hurry!
*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if(root==null) return rst; 
        
        //root is not null
        Queue<TreeNode> q = new LinkedList<TreeNode>();// ? 
        q.offer(root); //? offer vs. add
        int currLevelNodeNum = 1; 
        int nextLevelNodeNum = 0; 
        
        while (currLevelNodeNum != 0 ){
            ArrayList<Integer> levelList = new List<Integer>(); 
            nextLevelNodeNum = 0; 
            
            while(currLevelNodeNum != 0){
                TreeNode node = q.poll(); 
                currLevelNodeNum--; 
                
                if(node.left != null) {
                    q.offer(node.left); 
                    nextLevelNodeNum++; 
                }
                if(node.right != null){
                    q.offer(node.right); 
                    nextLevelNodeNum ++; 
                }
                rst.add(0, levelList);//!!
                currLevelNodeNum = nextLevelNodeNum;//!!recursive的思想
                
            }
        }
        return rst; 
        
    }
}
